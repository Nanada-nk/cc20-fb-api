generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  email        String?  @unique
  mobile       String?  @unique
  password     String   @db.VarChar(72)
  profileImage String   @map("profile_map")
  coverImage   String   @map("cover_image")
  createdAt    DateTime @default(now()) @map("create_at") @db.Timestamp(0)
  updatedAt    DateTime @updatedAt @map("update_at") @db.Timestamp(0)

  posts    Post[]
  comments Comment[]
  likes    Like[]

  senders   Relationship[] @relation(name: "sender")
  receivers Relationship[] @relation(name: "receiver")
  @@map("all_users")
}

model Post {
  id        Int       @id @default(autoincrement())
  message   String?   @db.Text
  image     String?
  createdAt DateTime  @default(now()) @map("create_at") @db.Timestamp(0)
  updatedAt DateTime  @updatedAt @map("update_at") @db.Timestamp(0)
  comments  Comment[]
  likes     Like[]

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
}

model Comment {
  id        Int      @id @default(autoincrement())
  message   String?  @db.Text
  createdAt DateTime @default(now()) @map("create_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("update_at") @db.Timestamp(0)

  user   User? @relation(fields: [userId], references: [id] , onDelete: Cascade)
  userId Int?
  Post   Post? @relation(fields: [postId], references: [id] , onDelete: Cascade)
  postId Int?
}

model Like {
  userId Int
  postId Int
  User   User @relation(fields: [userId], references: [id] , onDelete: Cascade)
  Post   Post @relation(fields: [postId], references: [id] , onDelete: Cascade)

  createdAt DateTime @default(now()) @map("create_at") @db.Timestamp(0)

  @@id([userId, postId])
}

enum RelationshipStatus {
  PENDING
  ACCEPTED
}

model Relationship {
  id         Int                @id @default(autoincrement())
  status     RelationshipStatus @default(PENDING)
  createdAt  DateTime           @default(now()) @map("create_at") @db.Timestamp(0)
  updatedAt  DateTime           @updatedAt @map("update_at") @db.Timestamp(0)
  senderId   Int                @map("sender_id")
  receiverId Int                @map("receiver_id")

  sender   User @relation(name: "sender", fields: [senderId], references: [id] , onDelete: Cascade)
  receiver User @relation(name: "receiver", fields: [receiverId], references: [id] , onDelete: Cascade)

  @@map("relation_ship")
}
